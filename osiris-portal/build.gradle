buildscript {
    dependencies {
        classpath pl.osPackage
        classpath pl.node
    }
}

group 'com.cgi.eoss.osiris'
version '0.1.0-SNAPSHOT'

apply plugin: 'java-base'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.github.node-gradle.node'

sourceSets {
    main {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = ["src/main/resources", "src/main/requireJs"]
        }
    }
    test {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

node {
    download = true
}

task requireJs(type: NodeTask) {
    script = file("${projectDir}/src/main/resources/app/scripts/vendor/requirejs/bin/r.js")
    args = [
            "-o", file("${projectDir}/src/main/requireJs/build.js"),
            "out=${buildDir}/requireJs/app.js"
    ]
    inputs.file("${projectDir}/src/main/requireJs/build.js")
    inputs.files(fileTree("${projectDir}/src/main/resources/app/scripts") {
        include '**/*.js'
    })
    outputs.file("${buildDir}/requireJs/app.js")
}

task stageApp(type: Sync) {
    into "${buildDir}/staging"
    includeEmptyDirs = false

    from("${projectDir}/src/main/resources/app") {
        exclude 'scripts/**/*.js'
        exclude 'index.html'
    }
    from("${projectDir}/src/main/resources/app/scripts/vendor/codemirror") {
        into 'scripts/vendor/codemirror'
        include '**/*'
    }
    from(requireJs) {
        into 'scripts'
        include '**/*'
    }
    from("${projectDir}/src/main/resources/app/scripts/osirisConfig.js") {
        into 'scripts'
    }
    from("${projectDir}/src/main/resources/app") {
        include 'index.html'

        filter { line ->
            line.replace('<script data-main="scripts/main" src="scripts/vendor/requirejs/require.js"></script>',
                    '<script src="scripts/app.js"></script>')
        }
        filter { line ->
            line.replace('<meta id="version" name="version" content="dev">',
                    "<meta id=\"version\" name=\"version\" content=\"${getBannerVersion()}\">")
        }
    }
}

String getBannerVersion() {
    return project.version.endsWith('-SNAPSHOT') ?
            "${getRpmVersion(project.version).version}-dev" :
            "${getRpmVersion(project.version).version}"
}

buildRpm.dependsOn stageApp
buildDeb.dependsOn stageApp

ospackage {
    packageName 'osiris-portal'
    version getRpmVersion(project.version).version
    release getRpmVersion(project.version).release
    arch NOARCH
    os LINUX

    into '/var/www/html/osiris'

    from("${buildDir}/staging") {
        user 'root'
        include '**'
        exclude 'scripts/osirisConfig.js'
    }

    from("${buildDir}/staging") {
        user 'root'
        fileType CONFIG | NOREPLACE
        include 'scripts/osirisConfig.js'
    }
}

configurations { pkg }
artifacts { pkg buildRpm }

sonarqube {
    properties {
        property "sonar.sources", "src/main/resources/app"
        property "sonar.exclusions", "src/main/resources/app/scripts/vendor/**/*"
    }
}

